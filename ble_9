#include <Arduino_APDS9960.h>

#include <PDM.h>

short sampleBuffer[256];
int microled1= 2;
int microled2= 3;
int proxled = 4;
int lightled =5;
int light ;
// Samples that are read

volatile int samplesRead;

void setup() {

   pinMode(microled1,OUTPUT);
  pinMode(microled2,OUTPUT);
  pinMode(proxled,OUTPUT);
  pinMode(lightled,OUTPUT);
  
  Serial.begin(9600);
  while (!Serial);

  // callback info
  PDM.onReceive(onPDMdata);

  // gain that defaults to 20
  // PDM.setGain(30);

  // initialize PDM with:
  // - one channel (mono mode)
  // - a 16 kHz sample 
  if (!PDM.begin(1, 16000)) {
    Serial.println("Failed to start PDM!");
    while (1);
  }
  if (!APDS.begin()) {
    Serial.println("Error initializing APDS-9960 sensor.");
    while (true); // Stop 
  }
}
int proximity = 0;
int r = 0, g = 0, b = 0;
unsigned long lastUpdate = 0;

void loop() {

    // Check if a proximity sensor is ready
  if (APDS.proximityAvailable()) {
    proximity = APDS.readProximity();// reading the value of proximity  from the sensor
   proximity = map(proximity,0,255,255,0);// Where to change prox. value
   analogWrite(proxled,proximity);
  }
 

  // Check if a color read is ready
  if (APDS.colorAvailable()) {
    APDS.readColor(r, g, b);
    light = (r+g+b)/3;
    if (light> 5)     // average light value
    {digitalWrite(lightled,LOW);}
    
  }
  else
  {      light = (r+g+b)/3;
    digitalWrite(lightled,HIGH);}

  // Print updates every 100 milliseconds
  if (millis() - lastUpdate > 5000) {
    lastUpdate = millis();
    Serial.print("PR=");
    Serial.print(proximity);
    Serial.print(" Light=");
    Serial.print(light);
    
   
  }
  // wait for samples
  if (samplesRead) {

    // print samples in the serial monitor
    for (int i = 0; i < samplesRead; i++) {
      Serial.println(sampleBuffer[i]);
      // check if sound is higher than 500
      if (sampleBuffer[i]>=700)  //  sound value adjusting 
      {
        digitalWrite(microled1,HIGH);
        digitalWrite(microled2,HIGH);
        
      }
      else if(sampleBuffer[i]<=700){
        digitalWrite(microled1,LOW);
        digitalWrite(microled2,LOW);
        }
      
    }
    

    samplesRead = 0;
  }
}

void onPDMdata() {
  // number of bytes
  int bytesAvailable = PDM.available();

  // sample buffer
  PDM.read(sampleBuffer, bytesAvailable);

  samplesRead = bytesAvailable / 2;
}
